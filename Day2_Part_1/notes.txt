Looping Control Structures : 

1) While loop : This loop executes all the statement(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

For every loop, basically there are 3 phases known as 

	(i) Initialization

	(ii) Condition

	(iii) Increment/Decrement 


Initialization performed at the beginning of the loop

Condition performed at the conditional part of the loop

Increment/Decrement performed before closing the loop

while(condition) {
   statement(s);
}

for loop : Executes the statements repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

for(initialization;condition;increment/decrement) {
   statement(s);
}

Arrays : An array is the finite ordered set of homogeneous elements, means all the elements belongs to same data type. 

All the elements of array are stored in successive memory locations. 

You can declare an array as

datatype[] variable = new datatype[size];

int[] a = new int[5]{10,22,53,19,21};

a[0]=10;
a[1]=22;
a[2]=53;
a[3]=19;
a[4]=21;

int[] a = new int[]{10,22,53,19,21};
//		for(int i=0;i<a.length;i++) {
//			System.out.println(a[i]);
//		}
		for (int i : a) {
			System.out.println(i);
		}

How interally foreach loop is working ???

In foreach loop, at first i points to the first element in array A, after processing first element it checks the next element is there or not by using hasMoreElements(), if hasMoreElements() returns true, it moves to next element by using nextElement(). It repeats as soon as hasMoreElements() returns true. 

There are 2 types of memories as

(i) Stack

(ii) Heap

*** Value types will be stored in STACK memory, and reference types will be stored in Heap Memory ***

s2="Srihari"

1) Write a Program to check the email is valid or not (if @ found print valid else print Invalid)

2) Write a Program to remove all vowels from the given string and store in different string

3) Write a Program to take array of string names and show which names are duplicated 

example 

String[] names = {"Dinesh","Anoop","Mounika","Anoop","Natraj","Manish","Anoop","Manish"};

4) Write a Program to Print all palindrome words in your given strig. 

String str="Shwetha MadaM is helping in workplace...Malayalam is language in Kerala...";

public int check(int n) {
   if (n%2==0) {
     return 1;
   } else {
     return 2;
   }
}

__________________________________________________________

public int check(int n) {
   if (n%2==0) {
     return 1;
   } 
     return 2;
}

_____________________________________________________________________

int a;

a="Hello";
a=12;
a=12.5

Object a;
a="Hello";
a=12;
a=12.5

Boxing and Unboxing : The concept of converting value type to reference type known as boxing, and reference type to value type known as unboxing. 

Object is the type that which can be used for boxing and unboxing. 

For boxing and unboxing, we need to use primitive data type classes 

int  -> Integer
float -> Float
double -> Double
boolean -> Boolean


class Test {
   public void check(Object ob) {
	if (ob=="ABC") {
	  System.out.println("Hi");
	} else {
	  System.out.println("Bye");
	}
   }
 
   public static void main(String[] args) {
	Test test = new Test();
	test.check("ABC");
   }
}

__________________________________________________________________________________________________________________

Object is the top level class in java. 

hashCode()

getClass()

toString() : It is having string representation, used to print the member variables of the class. This method will be called automatically once you print the object. 

What is the difference between == and equals()

________________________________________________________________________________________________________________________


Method Overloading : The concept of using the same method name w.r.t. different data types or different parameters known as method overloading. Here, the method name must be same, but no.of parameters or type of parameters we are using are different. 

This is an example for compile-time polymorphism.

____________________________________________________________________________________________________________________________________


class Quiz1 {
   public void show(double x) {
	System.out.println("DOuble " +x);
   }
   public void show(Object x) {
	System.out.println("Object " +x);
   }
   main() {
	new Quiz1().show(12);
   }
}


class Quiz2 {

   public void show(long x) {
	System.out.println("Long  " +x);
   }
   public void show(double x) {
	System.out.println("DOuble " +x);
   }
   public void show(Object x) {
	System.out.println("Object " +x);
   }
   main() {
	new Quiz2().show(12);
   }
}



class Quiz2 {

   public void show(int x) {
	System.out.println("Int  " +x);
   }
   public void show(double x) {
	System.out.println("DOuble " +x);
   }
   public void show(Object x) {
	System.out.println("Object " +x);
   }
   main() {
	new Quiz2().show('X');
   }
}




class Quiz2 {

   public void show(char x) {
	System.out.println("Char " +x);
   }
   public void show(int x) {
	System.out.println("Int  " +x);
   }
   public void show(double x) {
	System.out.println("DOuble " +x);
   }
   public void show(Object x) {
	System.out.println("Object " +x);
   }
   main() {
	new Quiz2().show('X');
   }
}


class Quiz2 {

   public void show(char x) {
	System.out.println("Char " +x);
   }
   public int show(int x) {
	return x++;
   }

   public void show(int x) {
	System.out.println("X " +x);
   }
   public void show(double x) {
	System.out.println("DOuble " +x);
   }
   public void show(Object x) {
	System.out.println("Object " +x);
   }
   main() {
	new Quiz2().show(2);
   }
}

__________________________________________________________________________

class Customer {}
class Quiz3 {
   public void show(String x) {
	System.out.println("String " +x);
   }
   public void show(Object x) {
	System.out.println("Object  " +x);
   }

   public static void main(String[] args) {
	new Quiz3().show(new Customer());
   }
}

__________________________________________________________________________________________

public class Dummy {

	    public static void main(String[] args) {
	        System.out.println("HI");
	    }
	    public static void main() {
	        System.out.println("Bye");
	    }
	    public static void main(String s) {
	        System.out.println("String");
	    }
	    public static void main(int x) {
	        System.out.println("INT");
	    }
}

__________________________________________________________________________________________
public class Hello {
	public void show() {
		System.out.println("Hi");
        }
	public static void main(String[] args) {
	 Hello hello;
	 hello.show();
        }
}

_____________________________________________________________________________________________________

Enums : If you want to store group of constant values, then we need the help of enums. 

Enums can be used for data validations and can be used as user-defined data type. 


syntax : 

enum Gender {
 MALE, FEMALE
}

 















