class Test {
     int a ,b;
     a=5;
     b=7;
}

A constructor is a special member, that which used to initialize the member variables of the class, it is special because it has the same name as that of class name. 

Rules : 
________

	(i) It will not contains any return type

	(ii) It will not return any value

	(iii) It will be invoked automatically once the instance of the class created

	 (iv) A constructor can be overloaded 


There are 2 types of constructors known as 

	(i) static constructor : These are called class constructors, these constructors are invoked automatically before control reaches the entry point. You cannot overload the static constructor. static constructors are used to initialize the static variables. 

*** In java we dont have any static constructors, as static {} acts as static constructor ***

	(ii) instance constructor : These are the constructors that which are invoked automatically once the instance of the class created. These constructors can be overloaded. 

this keyword : Used to identifiy the member variables of the class. 

class Test {
   int a;
   Test(int a) {
	this.a=a;
   }
}

Inheritance : The concept of deriving a new class from already existing class known as inheritance, the class which derived known as derived class, the class from which its derived known as base class. Through inheritance, we can reduce the size of the program. 

class First {
...
...
}

class Second extends First {
 ...
 ...
}

Once you create an object to Second class, you can access all public/protected and friendly members of base class. 

Quiz1:
______

class First {
   static int count;
   public void increment() {
	count++;
   }
   public void show() {
     System.out.println(count);
   }
   main() {
	First obj1 = new First();
	First obj2 = new First();
	obj1.increment();
	obj2.increment();
	obj1.show();
	obj2.show();
   }
}


Quiz2 : 

class First {
   public void show(int x) {
	System.out.println(x);
   }
}

class Second extends First {
  public int show(int x) {
	return 5;
  }
}

class Main {
    psvm() {
	Second obj = new Second();
	obj.show(12);
   }
}

Quiz 3
_______

class Test {
   static {
	System.out.println("Hi");
   }
   Test() {
	System.out.println("Hello");
   }
   psvm() {
     new Test();
   }
}

Quiz4 : 

class Hello {
   static {
	System.out.println("Java");
   }
}
class Test {
   static {
	System.out.println("Hi");
   }
   Test() {
	System.out.println("Hello");
   }
   psvm() {
     new Test();
   }
}

_______________________________________________________________________

class First {
   private void show() {
	System.out.println("Show From First...");
   }
}

class Second extends First {
   public void show() {
	System.out.println("Show From Second...");
   }
}

class Main {
     main() {
	new Second().show();
     }
}

class First {
   public void show() {
	System.out.println("Show From First...");
   }
}

class Second extends First {
   public static void show() {
	System.out.println("Show From Second...");
   }
}

class Main {
     main() {
	new Second().show();
     }
}

class Hello {
   static int score = 10;
   public void show() {
	System.out.println(score);
   }
   main() {
	new Hello().show();
   }
}

super keyword : If you want to pass values from derived class to base class, then we need the help of super keyword. 

It has 2 forms as 

(i) super as a keyword

(ii) super as a constructor 

Abstract Class : A class that which can be created, but not implemented and instantiated known as abstract class. Abstract class contains abstract and non-abstract methods, abstract methods needs to be overrided mandatorily by the derived class.

abstract class class_name {
    abstract method1(); 
    abstract method2();
}

Will Abstract Class Contains constructor or not 

final class : A final class cannot be inherited. 

final method cannot be redefined in derived class. 

final variable cannot be modified. 

class Hello extends String {
	public static void main(String[] args) {
	 System.out.println("Strings are Immutable...");
	}
}

_____________________________________________________________________________

enum Gender {
   MALE, FEMALE
}

class Agent {
   int agentId;
   String agenName;
   Gender gender;
   String city;
   double premium;
}

-> ReadAgent()
-> ShowAgent()
-> SearchAgent() 

























 


